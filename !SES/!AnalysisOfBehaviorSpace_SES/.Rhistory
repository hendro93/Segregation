netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
setwd("Desktop/!R/")
tes.df <- read.table(file = "Schelling_on_GIS-@SES experiment_ethnic-SES-table - Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv"
, header = T, sep = ",", skip = 6, fill = T)
head(tes.df)
tes.df[3,]
tes.df[3,5]
tes.df[3,5,]
tes.df[c(3,5),]
colnames(tes.df)
newdata <- tes.df[order(X.run.number.)]
newdata <- tes.df[order(X.run.number.),]
newdata <- tes.df[order("X.run.number.),]
newdata <- tes.df[order("X.run.number.")]
newdata <- tes.df[order("X.run.number."),]
newdata
source("~/.active-rstudio-document", echo=TRUE)
newdata <- tes.df[order("X.run.number."),]
newdata
head(newdata)
nrow(newdata)
nrow(tes.df)
newdata <- tes.df[order("X.run.number."),]
head(newdata)
nrow(tes.df)
nrow(newdata)
newdata <- tes.df[order([1]),]
newdata <- tes.df[order[1],]
newdata <- tes.df[order(tes.df$X.run.number.)]
newdata <- tes.df[order(tes.df$X.run.number.),]
head(newdata)
nrow(newdata)
filter(x = newdata )
nrow(newdata)
library(dplyr)
library(dplyr)
filterData = newdata[seq(1, nrow(newdata), 5),]
filterData
nrow(filterData)
new
nrow(filterData)
filterData = newdata[seq(1, nrow(newdata), 10),]
nrow(filterData)
filterData = newdata[seq(1, nrow(newdata), 100),]
nrow(filterData)
head(filterData)
filterData = newdata[seq(1, nrow(newdata), 1000),]
source("~/.active-rstudio-document", echo=TRUE)
filterData = newdata[seq(1, nrow(newdata), 1000),]
nrow(filterData)
head(filterData)
filterData = newdata[seq(1, nrow(newdata), 100),]
nrow(filterData)
head(filterData)
nrow(newdata)
newdata{1}
newdata[1]
newdata[2]
head(newdata[2])
head(newdata[0])
head(newdata[1])
head(newdata[1], 10)
head(newdata[1], 100)
head(newdata[1], 200)
head(1,)
newdata[1,]
newdata[2,]
newdata[3,]
head(newdata, 10)
head(tes.df, 10)
head(newdata, 10)
row_number(newdata)
write.csv(newdata, "/Users/hendrakusumah/Desktop/!R/newdata.csv", row.names = F)
tes2 = newdata[seq(1, nrow(newdata), 100),]
nrow(tes2)
write.csv(tes2, "/Users/hendrakusumah/Desktop/!R/", row.names = F)
write.csv(tes2, "/Users/hendrakusumah/Desktop/!R/tes2.csv", row.names = F)
boxplot(EGJ ~ `beta-rel`, data = tes2, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"])),
main = "Dissimilarity Index on Ethnic-Religion Scenario")
boxplot(EGJ ~ `beta-ses`, data = tes2, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"])),
main = "Dissimilarity Index on Ethnic-SES Scenario")
colnames(tes2)
boxplot(EGJ ~ beta.ses, data = tes2, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"])),
main = "Dissimilarity Index on Ethnic-SES Scenario")
boxplot(CHN ~ beta.ses, data = tes2, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"])),
main = "Dissimilarity Index on Ethnic-SES Scenario")
nrow(newdata)
library(readr)
newdata <- read_csv("newdata.csv")
View(newdata)
mydf %>%
group_by(newdata$X.run.number.)
newdata %>%
group_by(X.run.number.)
newdata %>% filter(as.numeric(row.names(.)) %% 99 == 0)
nrow(newdata)
newdata %>% filter(as.numeric(row.names(.)) %% 2 == 0)
newdata %>% filter(as.numeric(row.names(.)) %% 15== 0)
tes3 = newdata %>% filter(as.numeric(row.names(.)) %% 15== 0)
nrow(tes3)
tes3 = newdata %>% filter(as.numeric(row.names(.)) %% 99== 0)
nrow(tes3)
write.csv(tes3, "/Users/hendrakusumah/Desktop/!R/tes2.csv", row.names = F)
tes3 = newdata %>% filter(as.numeric(row.names(.)) %% 100 == 0)
nrow(tes3)
write.csv(tes3, "/Users/hendrakusumah/Desktop/!R/tes3.csv", row.names = F)
boxplot(CHN ~ beta.ses, data = tes3, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])),
main = "Dissimilarity Index on Ethnic-SES Scenario")
colnames(SES_160_filter)
boxplot(CHN ~ beta.ses, data = tes3, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])),
main = "Dissimilarity Index on Ethnic-SES Scenario", col = "red")
boxplot(EGJ ~ beta.ses, data = tes3, ylim = c(0,1), col = "grey")
boxplot(CHN ~ beta.ses, data = tes3, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])),
main = "Dissimilarity Index on Ethnic-SES Scenario", col = "red")
boxplot(EGJ ~ beta.ses, data = tes3, ylim = c(0,1), col = "grey", add = T)
boxplot(EGS ~ beta.ses, data = tes3, ylim = c(0,1), col = "green", add = T)
boxplot(OTH ~ beta.ses, data = tes3, ylim = c(0,1), col = "black", add = T)
row_number(newdata)
setwd("/Users/hendrakusumah/Documents/GitHub/Segregation/!SES/tes/")
sesData <- read.table(file = "Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv", header = T, sep = ",",
skip = 6, fill = T)
nrow(sesData)
boxplot((EGJ ~ beta.ses, data = sesData))
boxplot(EGJ ~ beta.ses, data = sesData)
boxplot(EGJ ~ beta.ses, data = tes3, ylim = c(0,1), col = "grey", add = T)
~ beta.ses, data = sesData, ylim = c(0,1),
a = sesData, ylim = c(0,1),
boxplot(CHN ~ beta.ses, data = sesData, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), #boxplotting
main = "Dissimilarity Index on Ethnic-SES Scenario", col = "red")
boxplot(EGJ ~ beta.ses, data = sesData, ylim = c(0,1), col = "grey", add = T)
boxplot(EGS ~ beta.ses, data = sesData, ylim = c(0,1), col = "green", add = T)
boxplot(OTH ~ beta.ses, data = sesData, ylim = c(0,1), col = "black", add = T)
boxplot(CHN ~ beta.ses, data = sesData, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), #boxplotting
main = "Dissimilarity Index on Ethnic-SES Scenario", col = "red")
boxplot(EGJ ~ beta.ses, data = sesData, ylim = c(0,1), col = "grey", add = T)
boxplot(EGS ~ beta.ses, data = sesData, ylim = c(0,1), col = "green", add = T)
boxplot(OTH ~ beta.ses, data = sesData, ylim = c(0,1), col = "black", add = T)
boxplot(CHN ~ beta.ses, data = tes3, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), #boxplotting
main = "Dissimilarity Index on Ethnic-SES Scenario", col = "red")
boxplot(EGJ ~ beta.ses, data = tes3, ylim = c(0,1), col = "grey", add = T)
boxplot(EGS ~ beta.ses, data = tes3, ylim = c(0,1), col = "green", add = T)
boxplot(OTH ~ beta.ses, data = tes3, ylim = c(0,1), col = "black", add = T)
# simple <- SES_160_filter[SES_160_filter$`beta-ses` == 12 | SES_160_filter$`beta-ses` == 8 | SES_160_filter$`beta-ses` == 4,]
simple <- read.table(file = "Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv", header = T, sep = ",",
skip = 6, fill = T)
boxplot(EGJ ~ `beta-ses`, data = simple, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = simple, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(CHN ~ beta.ses , data = simple
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ beta.ses , data = simple
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ beta.ses , data = simple
, add = T
, col = "black"
, ylim = c(0,1)
)
abline(h=0.24, col="grey", lwd=2)
abline(h=0.42, col="red", lwd=2)
abline(h=0.04, col="green", lwd=2)
abline(h=0.2, col="black", lwd=2)
legend("topright", inset=.02, title="Ethnicity",
c("EGJ","CHINESE","EGS", "OTHER"), fill=c("grey", "red", "green", "black"), horiz=F, cex = 0.8)
boxplot(EGJ ~ beta.ses, data = simple, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), main = "Dissimilarity Index on Ethnic-SES Scenario" )
write.csv(simple, "/Users/hendrakusumah/Desktop/!R/simple.csv", row.names = F)
sortedSimple <- simple[order(simple$X.run.number.),] #ordering data by one of column
nrow(sortedSimple)
sortedSimpleF = sortedSimple[sortedSimple$tie.houses.to.ses == F]
nrow(sortedSimpleF)
head(sortedSimpleF)
sortedSimpleF <-sortedSimple[sortedSimple$tie.houses.to.ses == F]
nrow(sortedSimpleF)
head(sortedSimpleF)
sortedSimpleF <-sortedSimple[sortedSimple$tie.houses.to.ses == FALSE]
nrow(sortedSimpleF)
head(sortedSimple)
nrow(sortedSimple)
sortedSimpleF <- sortedSimple[sortedSimple$tie.houses.to.ses == FALSE]
nrow(sortedSimpleF)
head(sortedSimpleF)
sortedSimple = simple[order(simple$X.run.number.),] #ordering data by one of column
<-
sortedSimpleF = sortedSimple[sortedSimple$tie.houses.to.ses == FALSE]
sortedSimple <- simple[order(simple$X.run.number.),] #ordering data by one of column
sortedSimpleF = sortedSimple[sortedSimple$tie.houses.to.ses == FALSE]
head(sortedSimpleF)
sortedSimpleF = sortedSimple[sortedSimple$tie.houses.to.ses == F,]
nrow(sortedSimpleF)
head(sortedSimpleF)
sortedSimpleF = sortedSimple[sortedSimple$tie.houses.to.ses == FALSE,]
nrow(sortedSimpleF)
head(sortedSimple)
sortedSimpleF = sortedSimple[sortedSimple$tie.houses.to.ses == "false",]
nrow(sortedSimpleF)
head(sortedSimpleF)
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"])), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(CHN ~ beta.ses , data = sortedSimpleF
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ beta.ses , data = sortedSimpleF
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ beta.ses , data = sortedSimpleF
, add = T
, col = "black"
, ylim = c(0,1)
)
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"] "no")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]), "no"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]), "no"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]), "no"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]), "no housing"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]) "no housing"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]), "no housing"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]), ^"no housing"), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]^"no")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]"no")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"],"no")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"],"-no")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]," - no")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]," - no housing constraint")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]," (no housing constraint)x")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(CHN ~ beta.ses , data = sortedSimpleF
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ beta.ses , data = sortedSimpleF
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ beta.ses , data = sortedSimpleF
, add = T
, col = "black"
, ylim = c(0,1)
)
lwd=2)
abline(h=0.24, col="grey", lwd=2)
abline(h=0.42, col="red", lwd=2)
abline(h=0.04, col="green", lwd=2)
abline(h=0.2, col="black", lwd=2)
legend("topright", inset=.02, title="Ethnicity",
c("EGJ","CHINESE","EGS", "OTHER"), fill=c("grey", "red", "green", "black"), horiz=F, cex = 0.8)
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"],italic(" (no housing constraint)")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"],italic(" (no housing constraint)")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(EGJ ~ beta.ses, data = sortedSimpleF, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(CHN ~ beta.ses , data = sortedSimpleF
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ beta.ses , data = sortedSimpleF
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ beta.ses , data = sortedSimpleF
, add = T
, col = "black"
, ylim = c(0,1)
)
abline(h=0.24, col="grey", lwd=2)
abline(h=0.42, col="red", lwd=2)
abline(h=0.04, col="green", lwd=2)
abline(h=0.2, col="black", lwd=2)
legend("topright", inset=.02, title="Ethnicity",
c("EGJ","CHINESE","EGS", "OTHER"), fill=c("grey", "red", "green", "black"), horiz=F, cex = 0.8)
simple
sortedSimpleT = sortedSimple[sortedSimple$tie.houses.to.ses == "true",]
nrow(sortedSimpleT)
boxplot(EGJ ~ beta.ses, data = sortedSimpleT, ylim = c(0,1), ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["SES"]," (with housing constraint)")), main = "Dissimilarity Index on Ethnic-SES Scenario" )
boxplot(CHN ~ beta.ses , data = sortedSimpleT
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ beta.ses , data = sortedSimpleT
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ beta.ses , data = sortedSimpleT
, add = T
, col = "black"
, ylim = c(0,1)
)
abline(h=0.24, col="grey", lwd=2)
abline(h=0.42, col="red", lwd=2)
abline(h=0.04, col="green", lwd=2)
abline(h=0.2, col="black", lwd=2)
legend("topright", inset=.02, title="Ethnicity",
c("EGJ","CHINESE","EGS", "OTHER"), fill=c("grey", "red", "green", "black"), horiz=F, cex = 0.8)
library(readxl)
REL_160_FILTER <- read_excel("~/Documents/GitHub/Segregation/!Religion/REL_160_FILTER.xlsx")
View(REL_160_FILTER)
colnames(REL_160_FILTER)
# simple <- REL_160_FILTER[REL_160_FILTER$`beta-rel` == 12 | REL_160_FILTER$`beta-rel` == 8 | REL_160_FILTER$`beta-rel` == 4,]
simple <- REL_160_FILTER
nrow((simple))
head(simple)
simpleT = simple[simple$`tie-houses-to-religion` == T]
simpleT = simple[simple$`tie-houses-to-religion` == T,]
nrow(simpleT)
boxplot(EGJ ~ `beta-rel`, data = simpleT, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"]," (no housing constraint)")),
main = "Dissimilarity Index on Ethnic-Religion Scenario")
boxplot(CHN ~ `beta-rel` , data = simpleT
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ `beta-rel` , data = simpleT
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ `beta-rel` , data = simpleT
, add = T
, col = "black"
, ylim = c(0,1)
)
simpleF = simple[simple$`tie-houses-to-religion` == F,]
nrow(simpleF)
boxplot(EGJ ~ `beta-rel`, data = simpleF, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"]," (no housing constraint)")),
main = "Dissimilarity Index on Ethnic-Religion Scenario")
boxplot(CHN ~ `beta-rel` , data = simpleF
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ `beta-rel` , data = simpleF
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ `beta-rel` , data = simpleF
, add = T
, col = "black"
, ylim = c(0,1)
)
abline(h=0.24, col="grey", lwd=2)
abline(h=0.42, col="red", lwd=2)
abline(h=0.04, col="green", lwd=2)
abline(h=0.2, col="black", lwd=2)
legend("topright", inset=.02, title="Ethnicity",
c("EGJ","CHINESE","EGS", "OTHER"), fill=c("grey", "red", "green", "black"), horiz=F, cex = 0.8)
simpleT = simple[simple$`tie-houses-to-religion` == T,]
nrow(simpleT)
boxplot(EGJ ~ `beta-rel`, data = simpleT, ylim = c(0,1),
ylab = "Dissimilarity Index (D)", xlab = expression(paste(beta ["rel"]," (with housing constraint)")),
main = "Dissimilarity Index on Ethnic-Religion Scenario")
boxplot(CHN ~ `beta-rel` , data = simpleT
, add = T, col = "red"
, ylim = c(0,1)
)
boxplot(EGS ~ `beta-rel` , data = simpleT
, add = T, col = "green"
, ylim = c(0,1)
)
boxplot(OTH ~ `beta-rel` , data = simpleT
, add = T
, col = "black"
, ylim = c(0,1)
)
abline(h=0.24, col="grey", lwd=2)
abline(h=0.42, col="red", lwd=2)
abline(h=0.04, col="green", lwd=2)
abline(h=0.2, col="black", lwd=2)
legend("topright", inset=.02, title="Ethnicity",
c("EGJ","CHINESE","EGS", "OTHER"), fill=c("grey", "red", "green", "black"), horiz=F, cex = 0.8)
boxplot(moranI ~ beta.ses, data = sortedSimpleF, ylab = "Moran-I", xlab = expression(paste(beta ["SES"])), main = "Moran-I on Ethnic-SES Scenario", col = "blue", ylim = c(0.5,0.85)  )
boxplot(moranI ~ beta.ses, data = sortedSimpleF, ylab = "Moran-I", xlab = expression(paste(beta ["SES"]," (with housing constraint)")), main = "Moran-I on Ethnic-SES Scenario", col = "blue", ylim = c(0.5,0.85)  )
abline(h=0.58, col="blue", lwd=2)
nrow(sortedSimpleF)
boxplot(moranI ~ beta.ses, data = sortedSimpleF, ylab = "Moran-I", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Moran-I on Ethnic-SES Scenario", col = "blue", ylim = c(0.5,0.85)  )
abline(h=0.58, col="blue", lwd=2)
boxplot(moranI ~ beta.ses, data = sortedSimpleT, ylab = "Moran-I", xlab = expression(paste(beta ["SES"]," (with housing constraint)")), main = "Moran-I on Ethnic-SES Scenario", col = "blue", ylim = c(0.5,0.85)  )
abline(h=0.58, col="blue", lwd=2)
boxplot(moranI ~ `beta-rel`, data = simpleF, ylab = "Moran-I", xlab = expression(paste(beta ["rel"])), main = "Moran-I on Ethnic-Religion Scenario", col = "blue", ylim = c(0.5,0.85) )
abline(h=0.58, col="blue", lwd=2)
boxplot(moranI ~ `beta-rel`, data = simpleF, ylab = "Moran-I", xlab = expression(paste(beta ["rel"]," (no housing constraint)")), main = "Moran-I on Ethnic-Religion Scenario", col = "blue", ylim = c(0.5,0.85) )
abline(h=0.58, col="blue", lwd=2)
boxplot(moranI ~ `beta-rel`, data = simpleT, ylab = "Moran-I", xlab = expression(paste(beta ["rel"]," (with housing constraint)")), main = "Moran-I on Ethnic-Religion Scenario", col = "blue", ylim = c(0.5,0.85) )
abline(h=0.58, col="blue", lwd=2)
boxplot(`simpson-index` ~ `beta-ses`, data = sortedSimpleF, ylab = "Simpson Index", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Simpson Index on Ethnic-SES Scenario", col = "orange", ylim = c(0,0.25) )
colnames(sortedSimpleF)
boxplot(`simpson-index` ~ beta.ses, data = sortedSimpleF, ylab = "Simpson Index", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Simpson Index on Ethnic-SES Scenario", col = "orange", ylim = c(0,0.25) )
boxplot(`simpson-index` ~ beta.ses, data = sortedSimpleF, ylab = "Simpson Index", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Simpson Index on Ethnic-SES Scenario", col = "orange", ylim = c(0,0.25) )
colnames(sortedSimpleF)
boxplot(simpson.index ~ beta.ses, data = sortedSimpleF, ylab = "Simpson Index", xlab = expression(paste(beta ["SES"]," (no housing constraint)")), main = "Simpson Index on Ethnic-SES Scenario", col = "orange", ylim = c(0,0.25) )
abline(h=0.018, col="orange", lwd=2)
boxplot(simpson.index ~ beta.ses, data = sortedSimpleT, ylab = "Simpson Index", xlab = expression(paste(beta ["SES"]," (with housing constraint)")), main = "Simpson Index on Ethnic-SES Scenario", col = "orange", ylim = c(0,0.25) )
abline(h=0.018, col="orange", lwd=2)
boxplot(`simpson-index` ~ `beta-rel`, data = simpleF, ylab = "Simpson Index", xlab = expression(paste(beta ["Rel"]," (no housing constraint)")), main = "Simpson Index on Ethnic-Religion Scenario", col = "orange" , ylim = c(0,0.25))
abline(h=0.018, col="orange", lwd=2)
boxplot(`simpson-index` ~ `beta-rel`, data = simpleT, ylab = "Simpson Index", xlab = expression(paste(beta ["Rel"]," (with housing constraint)")), main = "Simpson Index on Ethnic-Religion Scenario", col = "orange" , ylim = c(0,0.25))
abline(h=0.018, col="orange", lwd=2)
