nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Write output to outpath of experiment within nl
write_simoutput(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
library(nlrx)
netlogopath <- file.path("/Applications/NetLogo 6.0.3/")
modelpath <- file.path(netlogopath, "models/Sample Models/Biology/Wolf Sheep Predation.nlogo")
outpath <- file.path(".")
nl <- nl(nlversion = "6.0.3",
nlpath = netlogopath,
modelpath = modelpath,
jvmmem = 1024)
nl@experiment <- experiment(expname="wolf-sheep",
outpath=outpath,
repetition=1,
tickmetrics="true",
idsetup="setup",
idgo="go",
runtime=50,
evalticks=seq(40,50),
metrics=c("count sheep", "count wolves", "count patches with [pcolor = green]"),
variables = list('initial-number-sheep' = list(min=50, max=150, qfun="qunif"),
'initial-number-wolves' = list(min=50, max=150, qfun="qunif")),
constants = list("model-version" = "\"sheep-wolves-grass\"",
"grass-regrowth-time" = 30,
"sheep-gain-from-food" = 4,
"wolf-gain-from-food" = 20,
"sheep-reproduce" = 4,
"wolf-reproduce" = 5,
"show-energy?" = "false"))
nl@simdesign <- simdesign_lhs(nl=nl,
samples=100,
nseeds=3,
precision=3)
# Evaluate nl object:
eval_variables_constants(nl)
print(nl)
# Run all simulations (loop over all siminputrows and simseeds)
results <- run_nl_all(nl)
setwd("/Users/hendrakusumah/Documents/GitHub/Segregation/!SES/!AnalysisOfBehaviorSpace_SES/")
head(sesData)
sesData <- read.table(file = "Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv", header = T
, sep = ",", skip = 6, fill = T)
head(sesData)
library(gridTable)
install.packages("gridTable")
print.data.frame(setData)
install.packages("gridExtra")
library(gridExtra)
"data_output.pdf", height=11, width=8.5)
pdf("data_output.pdf", height=11, width=8.5)
grid.table(sesData)
dev.off()
read.csv("Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv")
sesData
library(readr)
Schelling_on_GIS_SES_experiment_ethnic_SES_table <- read_csv("Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv",
skip = 6)
View(Schelling_on_GIS_SES_experiment_ethnic_SES_table)
formattable::formattable(mtcars[1:10,])
formattable::formattable(sesData[1:10,])
install.packages("formattable")
formattable::formattable(sesData[1:10,])
sortedSESData = sesData[order(sesData$X.run.number.),]
formattable::formattable(sortedSESData[1:10,])
sesData <- read.table(file = "Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv", header = T
, sep = ",", skip = 6, fill = T)
sortedSESData = sesData[order(sesData$X.run.number.),]
sortedSESDataF = sortedSESData[sortedSESData$tie.houses.to.ses == "false",]
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = expression(paste(beta ["SES"]," (no housing constraint)"))
, ylab = "Dissimilarity Index (D)", col = "lightgrey", main = "Dissimilarity Index on Ethnic-SES Scenario", ylim = c(0,1) )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF
, col = "lightgrey", main = "EGJ", ylim = c(0,1) )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF
, col = "lightgrey", main = "EGJ", ylim = c(0,1) )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF
, col = "lightgrey", main = "EGJ", ylim = c(0,1) )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1) )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex = 1.5 )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex = 1.5 )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 1.5 )
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 3)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5)
boxplot(CHN ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "" , col = "red", main = "CHINESE", ylim = c(0,1), cex.main = 2.5)
boxplot(EGS ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5)
abline(h=0.24, col="red", lwd=2)
boxplot(CHN ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "" , col = "red", main = "CHINESE", ylim = c(0,1), cex.main = 2.5)
boxplot(CHN ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "" , col = "maroon", main = "CHINESE", ylim = c(0,1), cex.main = 2.5)
abline(h=0.42, col="red", lwd=2)
boxplot(EGS ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5)
abline(h=0.04, col="red", lwd=2)
boxplot(OTH ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "" , col = "black", main = "OTHER", ylim = c(0,1), cex.main = 2.5)
abline(h=0.2, col="red", lwd=2)
boxplot(EGJ ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5 )
sortedSESDataT = sortedSESData[sortedSESData$tie.houses.to.ses == "true",]
boxplot(EGJ ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5 )
abline(h=0.24, col="red", lwd=2)
boxplot(CHN ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "red", main = "CHINESE", ylim = c(0,1), cex.main = 2.5)
boxplot(CHN ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "maroon", main = "CHINESE", ylim = c(0,1), cex.main = 2.5)
abline(h=0.42, col="red", lwd=2)
boxplot(EGS ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5)
abline(h=0.04, col="red", lwd=2)
boxplot(OTH ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "black", main = "OTHER", ylim = c(0,1), cex.main = 2.5)
abline(h=0.2, col="red", lwd=2)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "", ylim = c(0,1), cex.main = 2.5)
abline(h=0.24, col="red", lwd=2)
boxplot(EGJ ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = "", ylab = ""
, col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5)
abline(h=0.24, col="red", lwd=2)
abline(h=0.018, col="orange", lwd=2)
abline(h=0.018, col="orange", lwd=2)
boxplot(sortedSESDataF$simpson.index ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = expression(paste(beta ["SES"]," (no housing constraint)"))
, ylab = "Excess Avg Simpson Index", col = "orange", main = "Simpson Index on Ethnic-SES Scenario", ylim = c(0,0.3) )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedSESDataF$simpson.index ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = expression(paste(beta ["SES"]," (no housing constraint)"))
, ylab = "", col = "orange", main = "", ylim = c(0,0.3) )
boxplot(sortedSESDataF$simpson.index ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "", col = "orange", main = "", ylim = c(0,0.3) )
boxplot(sortedSESDataF$simpson.index ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3) )
boxplot(sortedSESDataF$simpson.index ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5 )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedSESDataF$moranI ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5)
abline(h=0.58, col="red", lwd=2)
boxplot(sortedSESDataT$simpson.index ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5 )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedSESDataT$moranI ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9), cex.main = 2.5  )
abline(h=0.58, col="red", lwd=2)
boxplot(sortedSESDataT$simpson.index ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5 )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedSESDataF$simpson.index ~ sortedSESDataF$beta.ses, data = sortedSESDataF, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5 )
abline(h=0.018, col="red", lwd=2)
relData <- read.table(file = "Schelling_on_GIS-@Religion experiment_ethnic-religion-table.csv", header = T
, sep = ",", skip = 6, fill = T)
relData <- read.table(file = "Schelling_on_GIS-@Religion experiment_ethnic-religion-table.csv", header = T
, sep = ",", skip = 6, fill = T)
setwd("/Users/hendrakusumah/Documents/GitHub/Segregation/!Religion/!AnalysisOfBehaviorSpace_REL/")
relData <- read.table(file = "Schelling_on_GIS-@Religion experiment_ethnic-religion-table.csv", header = T
, sep = ",", skip = 6, fill = T)
sortedRelData = relData[order(relData$X.run.number.),]
sortedRelDataF = sortedRelData[sortedRelData$tie.houses.to.religion == "false",]
boxplot(EGJ ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5 )
abline(h=0.24, col="red", lwd=2)
boxplot(CHN ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "" , col = "red", main = "CHINESE", ylim = c(0,1), cex.main = 2.5  )
boxplot(CHN ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "" , col = "maroon", main = "CHINESE", ylim = c(0,1), cex.main = 2.5  )
abline(h=0.42, col="red", lwd=2)
boxplot(EGS ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5   )
abline(h=0.04, col="red", lwd=2)
boxplot(OTH ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "" , col = "black", main = "OTHER", ylim = c(0,1) , cex.main = 2.5  )
abline(h=0.2, col="red", lwd=2)
boxplot(sortedRelDataF$simpson.index ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5  )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedRelDataF$moranI ~ sortedRelDataF$beta.rel, data = sortedRelDataF, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9), cex.main = 2.5  )
abline(h=0.58, col="red", lwd=2)
boxplot(EGJ ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5  )
sortedRelDataT = sortedRelData[sortedRelData$tie.houses.to.religion == "true",]
boxplot(EGJ ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5  )
abline(h=0.24, col="red", lwd=2)
boxplot(CHN ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "" , col = "red", main = "CHINESE", ylim = c(0,1), cex.main = 2.5 )
abline(h=0.42, col="red", lwd=2)
boxplot(EGS ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5 )
abline(h=0.04, col="red", lwd=2)
boxplot(OTH ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "" , col = "black", main = "OTHER",ylim = c(0,1), cex.main = 2.5  )
abline(h=0.2, col="red", lwd=2)
boxplot(sortedRelDataT$simpson.index ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3) )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedRelDataT$simpson.index ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5 )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedRelDataT$moranI ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5)
abline(h=0.58, col="red", lwd=2)
boxplot(sortedRelDataT$moranI ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5, par(bg = "#f7f7f7")
)
boxplot(sortedRelDataT$moranI ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5, par(bg = "red")
)
boxplot(sortedRelDataT$moranI ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5, par(bg = "lightgrey")
)
#f7f7f7
boxplot(sortedRelDataT$moranI ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5, par(bg = "#f7f7f7")
)
abline(h=0.58, col="red", lwd=2)
boxplot(sortedRelDataT$moranI ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9) , cex.main = 2.5, par(bg = "#f7f7f7")
)
abline(h=0.58, col="red", lwd=2)
boxplot(sortedRelDataT$simpson.index ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5,  par(bg = "#f7f7f7"))
abline(h=0.018, col="red", lwd=2)
boxplot(EGJ ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5,  par(bg = "#f7f7f7")  )
abline(h=0.24, col="red", lwd=2)
boxplot(CHN ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "" , col = "red", main = "CHINESE", ylim = c(0,1), cex.main = 2.5,  par(bg = "#f7f7f7") )
abline(h=0.42, col="red", lwd=2)
boxplot(EGS ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5,  par(bg = "#f7f7f7") )
abline(h=0.04, col="red", lwd=2)
boxplot(OTH ~ sortedRelDataT$beta.rel, data = sortedRelDataT, xlab = ""
, ylab = "" , col = "black", main = "OTHER",ylim = c(0,1), cex.main = 2.5,  par(bg = "#f7f7f7")  )
abline(h=0.2, col="red", lwd=2)
setwd("/Users/hendrakusumah/Documents/GitHub/Segregation/!SES/!AnalysisOfBehaviorSpace_SES/")
sesData <- read.table(file = "Schelling_on_GIS-@SES experiment_ethnic-SES-table.csv", header = T
, sep = ",", skip = 6, fill = T)
sortedSESData = sesData[order(sesData$X.run.number.),]
sortedSESDataF = sortedSESData[sortedSESData$tie.houses.to.ses == "false",]
sortedSESDataT = sortedSESData[sortedSESData$tie.houses.to.ses == "true",]
boxplot(EGJ ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "lightgrey", main = "EGJ", ylim = c(0,1), cex.main = 2.5, par(bg = "#f7f7f7") )
abline(h=0.24, col="red", lwd=2)
boxplot(CHN ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "maroon", main = "CHINESE", ylim = c(0,1), cex.main = 2.5, par(bg = "#f7f7f7"))
abline(h=0.42, col="red", lwd=2)
boxplot(EGS ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "green", main = "EGS", ylim = c(0,1), cex.main = 2.5, par(bg = "#f7f7f7"))
abline(h=0.04, col="red", lwd=2)
boxplot(OTH ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "" , col = "black", main = "OTHER", ylim = c(0,1), cex.main = 2.5, par(bg = "#f7f7f7"))
abline(h=0.2, col="red", lwd=2)
boxplot(sortedSESDataT$simpson.index ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "orange", main = "Simpson Index", ylim = c(0,0.3), cex.main = 2.5, par(bg = "#f7f7f7") )
abline(h=0.018, col="red", lwd=2)
boxplot(sortedSESDataT$moranI ~ sortedSESDataT$beta.ses, data = sortedSESDataT, xlab = ""
, ylab = "", col = "blue", main = "Moran-I", ylim = c(0.4,0.9), cex.main = 2.5, par(bg = "#f7f7f7")  )
abline(h=0.58, col="red", lwd=2)
